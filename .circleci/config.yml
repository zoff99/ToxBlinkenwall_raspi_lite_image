---
version: 2

workflows:
  version: 2
  build_linux:
    jobs:
      - pigen

jobs:
  pigen:
    working_directory: ~/work
    machine:
      image: ubuntu-2004:202104-01
           # ubuntu-1604:202104-01
    # docker:
    #  - image: debian:stretch

    steps:
      - checkout
      - restore_cache:
          key: tbw-library-dependencies-v14-{{ .Branch }}
      - run: sudo pkill apt-get || echo dummy
      - run: apt --version
      - run: ls -al /etc/apt/sources.list.d/
      - run: sudo rm /etc/apt/sources.list.d/heroku.list || exit 0
      - run: sudo rm /etc/apt/sources.list.d/google-chrome.list || exit 0
      - run: sudo apt update &&
          sudo apt install -y --no-install-recommends apt apt-transport-https
      - run: apt --version
      - run: sudo apt update &&
          sudo apt install -y --no-install-recommends
            quilt parted coreutils realpath qemu-user-static debootstrap zerofree pxz zip
            dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl
            openssl ca-certificates git sudo bc wget rsync
            binfmt-support unzip

      - run: git clone https://github.com/RPi-Distro/pi-gen ; cd pi-gen ; git checkout "2020-02-05-raspbian-buster" # pi4 support
      - run: pwd; ls -al; id -a
      # add ToxBlinkenwall custom build stuff ----------
      - run: cd ./stage2 ; find . -name '*.sh' -exec chmod a+x {} \;
      - run: cd ./stage2 ; ls -alR
      - run: cp -av ./stage2 pi-gen/
      # put cache files in correct place
      - run: if [ -e ~/work/cache ]; then mv -v ~/work/cache pi-gen/ ; sudo chown circleci:circleci /home/circleci/work/pi-gen/cache/c.tgz ; fi
      # give name of CI vars to docker
      - run: echo "$CIRCLE_PROJECT_USERNAME" > ./pi-gen/stage3/_GIT_PROJECT_USERNAME_
      - run: echo "$CIRCLE_PROJECT_USERNAME"; cat ./pi-gen/stage3/_GIT_PROJECT_USERNAME_
      - run: echo "$CIRCLE_PROJECT_REPONAME" > ./pi-gen/stage3/_GIT_PROJECT_REPONAME_
      - run: echo "$CIRCLE_PROJECT_REPONAME"; cat ./pi-gen/stage3/_GIT_PROJECT_REPONAME_
      - run: echo "$CIRCLE_BRANCH" > ./pi-gen/stage3/_GIT_BRANCH_
      - run: echo "$CIRCLE_BRANCH"; cat ./pi-gen/stage3/_GIT_BRANCH_
      # change bsdtar to give more output, so CI wont kill our job because of no output for a long time
      - run: sed -i -e 'sxbsdtar xbsdtar -v x' ./pi-gen/export-noobs/prerun.sh
      - run: cat ./pi-gen/export-noobs/prerun.sh
      # change debootstrap to give more output, so CI wont kill our job because of no output for a long time
      - run: sed -i -e 'sxdebootstrap xdebootstrap --verbose x' ./pi-gen/stage0/prerun.sh
      - run: cat ./pi-gen/stage0/prerun.sh
      # add ToxBlinkenwall custom build stuff ----------
      - run: cd pi-gen;echo "IMG_NAME='Raspbian'" > config
      - run: cd pi-gen;touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP
      - run: cd pi-gen;touch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES
      - run: cd pi-gen;sudo ./build-docker.sh # ./build.sh
      - run: cd pi-gen; ls -hal deploy/
      - run: cd ~/work; rm -Rf cache ; mkdir -p cache ; chmod a+rwx cache
      - run: cd pi-gen; ls -al deploy/cache/; cd deploy/cache/ ; ls -al ; ls -al  ~/work/cache
      - run: cd pi-gen; cd deploy/cache/ ; sudo tar -czvf /home/circleci/work/cache/c.tgz * # cache dir is strangly not accessalbe without root
      - run: cd /home/circleci/work/cache/ ; sudo chown circleci:circleci c.tgz
      - run: ls -hal /home/circleci/work/cache/c.tgz
      - run: cd pi-gen; mkdir -p deploy2/
      - run: cd pi-gen; cp -av deploy/image_*-Raspbian-lite.zip deploy2/image-Raspbian-lite.zip
      - run: cd pi-gen; cp -av deploy/build.log deploy2/
      - run: cd pi-gen; ls -hal deploy2/

      - save_cache:
          paths: [ "~/work/cache" ]
          key: tbw-library-dependencies-v14-{{ .Branch }}

      - store_artifacts:
          path: ~/work/pi-gen/deploy2
          destination: deploy


